const { createServer } = require('http');
const { Server } = require('socket.io');
const debug = require('debug')('caro-api:server');
const app = require('../app');
const { initDB } = require('../config/database');

let server;

function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || '3000');

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

initDB()
  .then(() => {
    server = createServer(app);
    app.set('port', port);
    const io = new Server(server);

    io.on('connection', (socket) => {
      socket.on('subscribe', (room) => {
        socket.join(room);
      });

      socket.on('unsubscribe', (room) => {
        socket.leave(room);
      });

      socket.on('SEND_MESSAGE', (data) => {
        io.in(data.room).emit('RECEIVE_MESSAGE', data);
      });
    });

    app.set('io', io);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((error) => {
    console.error('Failed to make all database connections!');
    console.error(error);
    process.exit(1);
  });
